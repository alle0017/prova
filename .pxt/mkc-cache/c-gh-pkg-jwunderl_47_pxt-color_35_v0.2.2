{"files":{"pxt.json":"{\n    \"name\": \"Color Fading\",\n    \"version\": \"0.2.2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"palette\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"color.ts\",\n        \"fade.ts\",\n        \"palettes.ts\",\n        \"effect.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": false,\n    \"targetVersions\": {\n        \"target\": \"1.8.22\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","README.md":"# pxt-color\n\n## set palette\n\nDynamically set all or part of the game's current palette\n\n@param palette The colors to set\n@param start [optional] The index to start setting colors at (by default, 0)\n@param length [optional] The number of colors to copy (by default, all)\n@param pOffset [optional] The offset to start copying from the palette (by default, 0)\n\n## fade from palette to palette\n\nCreate a Fade from one palette to another that occurs over the given duration\n\n@param start the palette to start from\n@param end the palette to end at\n@param duration [optional] how long it should take (by default, 2 seconds)\n\n## apply fade effect\n\nApply an effect to alter the screen's color palette.\n\n@param duration how long the effect should take (by default, 2 seconds)\n\n## pause until current fade done\n\nPause until the current fade is completed. This can be useful when you want a fade to occur after another has completed.\n\n## clear fade effect\n\nClear the last fade effect, by resetting the palette to what it was before that effect.\n\n## Supported targets\n\n* for PXT/arcade\n(The metadata above is needed for package search.)\n","color.ts":"/**\n * Color library for pxt arcade\n */\n//% weight=70 color=\"#105722\" icon=\"\\uf043\" advanced=false\nnamespace color {\n    let currentColors: Buffer;\n\n    // A color in hex format, between 0x000000 and 0xFFFFFF\n    export type Color = number;\n\n    /**\n     * A color in RGB format\n     */\n    export class RGB {\n        protected _r: number;\n        protected _g: number;\n        protected _b: number;\n\n        constructor(red: number, green: number, blue: number) {\n            this.red = red;\n            this.green = green;\n            this.blue = blue;\n        }\n\n        get red(): number {\n            return this._r;\n        }\n        set red(v: number) {\n            this._r = Math.clamp(0, 255, v);\n        }\n\n        get green(): number {\n            return this._g;\n        }\n        set green(v: number) {\n            this._g = Math.clamp(0, 255, v);\n        }\n\n        get blue(): number {\n            return this._b;\n        }\n        set blue(v: number) {\n            this._b = Math.clamp(0, 255, v);\n        }\n\n        toString(): string {\n            return `RGB(${this._r}, ${this._g}, ${this._b})`;\n        }\n\n        hexValue(): Color {\n            return toColor(\n                this.red,\n                this.green,\n                this.blue\n            );\n        }\n\n        static fromHexValue(col: Color): RGB {\n            return new RGB(\n                color.unpackR(col),\n                color.unpackG(col),\n                color.unpackB(col)\n            );\n        }\n    }\n\n    /**\n     * A color in HSL format\n     */\n    export class HSL {\n        protected h: number;\n        protected s: number;\n        protected l: number;\n\n        constructor(hue: number, saturation: number, luminosity: number) {\n            this.hue = hue;\n            this.saturation = saturation;\n            this.luminosity = luminosity;\n        }\n\n        get hue(): number {\n            return this.h;\n        }\n        set hue(v: number) {\n            const h = v % 360;\n            this.h = h < 0 ? 360 + h : h;\n        }\n\n        get saturation(): number {\n            return this.s;\n        }\n        set saturation(v: number) {\n            this.s = Math.clamp(0, 1, v);\n        }\n\n        get luminosity(): number {\n            return this.l;\n        }\n        set luminosity(v: number) {\n            this.l = Math.clamp(0, 1, v);\n        }\n\n        toString(): string {\n            return `HSL(${this.h}, ${this.s}, ${this.l})`;\n        }\n\n        // https://gist.github.com/vahidk/05184faf3d92a0aa1b46aeaa93b07786\n        hexValue(): Color {\n            const chroma = (1 - Math.abs(2 * this.luminosity - 1)) * this.saturation;\n            const hp = this.hue / 60.0;\n            // second largest component of this color\n            const x = chroma * (1 - Math.abs((hp % 2) - 1));\n\n            // 'point along the bottom three faces of the RGB cube'\n            let rgb1: number[];\n            if (this.hue === undefined)\n                rgb1 = [0, 0, 0];\n            else if (hp <= 1)\n                rgb1 = [chroma, x, 0];\n            else if (hp <= 2)\n                rgb1 = [x, chroma, 0];\n            else if (hp <= 3)\n                rgb1 = [0, chroma, x];\n            else if (hp <= 4)\n                rgb1 = [0, x, chroma];\n            else if (hp <= 5)\n                rgb1 = [x, 0, chroma];\n            else if (hp <= 6)\n                rgb1 = [chroma, 0, x];\n\n            // lightness match component\n            let m = this.luminosity - chroma * 0.5;\n            return toColor(\n                Math.round(255 * (rgb1[0] + m)),\n                Math.round(255 * (rgb1[1] + m)),\n                Math.round(255 * (rgb1[2] + m))\n            );\n        }\n\n        // https://gist.github.com/vahidk/05184faf3d92a0aa1b46aeaa93b07786\n        static fromHexValue(col: Color): HSL {\n            const rgb = RGB.fromHexValue(col);\n\n            const r = rgb.red / 255;\n            const g = rgb.green / 255;\n            const b = rgb.blue / 255;\n\n            const max = Math.max(Math.max(r, g), b);\n            const min = Math.min(Math.min(r, g), b);\n\n            const diff = max - min;\n            let h;\n            if (diff === 0)\n                h = 0;\n            else if (max === r)\n                h = (g - b) / diff % 6;\n            else if (max === g)\n                h = (b - r) / diff + 2;\n            else if (max === b)\n                h = (r - g) / diff + 4;\n\n            let l = (min + max) / 2;\n            let s = diff === 0\n                ? 0\n                : diff / (1 - Math.abs(2 * l - 1));\n\n            return new HSL(h * 60, s, l);\n        }\n    }\n\n    //% fixedInstances\n    export class Palette extends ColorBuffer { }\n\n    class FadeRevert {\n        constructor(\n            public fade: FadeEffect,\n            protected revert: (duration: number) => Fade\n        ) { }\n\n        applyRevert(duration: number) {\n            return this.revert(duration).then(f => {\n                const effectStack = getFadingEffectStack();\n                effectStack.removeElement(this);\n                return f;\n            });\n        }\n    }\n\n    const COLOR_FADING_EFFECT_KEY = \"__colorfadingeffectstate\";\n    function getFadingEffectStack(): FadeRevert[] {\n        let sceneState: FadeRevert[] = game.currentScene().data[COLOR_FADING_EFFECT_KEY];\n        if (!sceneState) {\n            sceneState = clearFadingEffectStack();\n        }\n        return sceneState;\n    }\n\n    function clearFadingEffectStack(): FadeRevert[] {\n        return game.currentScene().data[COLOR_FADING_EFFECT_KEY] = [];\n    }\n\n    //% fixedInstances\n    export class FadeEffect implements effects.BackgroundEffect {\n        protected currentFade: Fade;\n        protected startPalette: Palette;\n\n        constructor(\n            protected id: string,\n            protected fadeFactory: () => Fade,\n            protected revertsId?: string\n        ) { }\n\n        /**\n         * Apply this effect to the screen's color palette\n         */\n        //% blockId=effectStartScreenFade\n        //% block=\"apply fade effect %effect||over %duration ms\"\n        //% duration.shadow=timePicker\n        //% weight=60 help=effects/start-screen-effect\n        startScreenEffect(duration = 2000) {\n            const effectStack = getFadingEffectStack();\n            const lastEffect = effectStack.length && effectStack[effectStack.length - 1];\n            const currPalette = currentPalette();\n            const rev = new FadeRevert(this, duration => {\n                const f = new Fade();\n\n                return f.setEndPalette(currPalette)\n                    .start(duration);\n            });\n            \n            effectStack.push(rev);\n\n            if (lastEffect) {\n                lastEffect.fade.stop();\n                if (this.revertsId && this.revertsId == lastEffect.fade.id) {\n                    this.currentFade = lastEffect.applyRevert(duration).then(f => {\n                        const effects = getFadingEffectStack();\n                        effects.removeElement(rev);\n                        return f;\n                    });\n                    return;\n                }\n            }\n            this.startPalette = currPalette;\n            this.currentFade = this.fadeFactory();\n\n            this.currentFade.start(duration);\n        }\n\n        stop() {\n            const effectStack = getFadingEffectStack();\n            if (this.currentFade\n                && effectStack.length\n                && effectStack[effectStack.length - 1].fade === this\n            ) {\n                this.currentFade.stop();\n            }\n        }\n    }\n\n    /**\n     * Dynamically set all or part of the game's current palette\n     *\n     * @param palette The colors to set\n     * @param start The index to start setting colors at\n     * @param length The number of colors to copy\n     * @param pOffset The offset to start copying from the palette\n     */\n    //% blockId=colorSetPalette block=\"set color palette to %palette\"\n    //% weight=90\n    export function setPalette(palette: Palette, start = 0, length = 0, paletteOffset = 0) {\n        if (!length || length > palette.length)\n            length = palette.length;\n        if (!currentColors)\n            currentColors = originalPalette.buf.slice();\n\n        const fromStart = paletteOffset * 3;\n        const toStart = start * 3;\n        const asBuf = palette.buf;\n\n        const copyLength = 3 * Math.clamp(0, availableColors(), length);\n\n        for (let i = 0; i < copyLength; i++) {\n            currentColors[toStart + i] = asBuf[fromStart + i];\n        }\n\n        image.setPalette(currentColors);\n    }\n\n    /**\n     * Set an index in the color palette to a new color.\n     *\n     * @param index the index to update; must be between 1 and 15\n     * @param color the color to set\n     */\n    //% blockId=colorSetColorAtIndex block=\"set color %index to %newColor || over %duration ms\"\n    //% weight=100\n    //% index.min=1 index.max=15 index.step=1\n    //% index.defl=1\n    //% duration.shadow=timePicker\n    //% newColor.shadow=colorsrgb\n    export function setColor(index: number, newColor: number, duration?: number) {\n        if (index <= 0 || index > 15)\n            return;\n        if (duration) {\n            if (!currentColors)\n                currentColors = originalPalette.buf.slice();\n            const newPalette = bufferToPalette(currentColors.slice());\n            newPalette.setColor(index, newColor);\n            color.startFade(bufferToPalette(currentColors), newPalette, duration)\n        } else {\n            setPalette(hexArrayToPalette([newColor]), index | 0, 1, 0);\n        }\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% blockId=\"colorsrgb__dup\" block=\"red %red|green %green|blue %blue\"\n    //% red.min=0 red.max=255 green.min=0 green.max=255 blue.min=0 blue.max=255\n    //% help=\"colors/rgb\"\n    //% weight=95 blockGap=8\n    export function __rgb(red: number, green: number, blue: number): number {\n        return color.rgb(red, green, blue);\n    }\n\n     /**\n     * Convert an HSV (hue, saturation, value) color to RGB\n     * @param hue value of the hue channel between 0 and 255. eg: 255\n     * @param sat value of the saturation channel between 0 and 255. eg: 255\n     * @param val value of the value channel between 0 and 255. eg: 255\n     */\n    //% blockId=\"colorshsv__dup\" block=\"hue %hue|sat %sat|val %val\"\n    //% hue.min=0 hue.max=255 sat.min=0 sat.max=255 val.min=0 val.max=255\n    //% help=\"colors/hsv\"\n    //% weight=94\n    export function __hsv(hue: number, sat: number, val: number) {\n        // TODO: this and __rgb are already in colors.ts, just hidden.\n        // Overloading them isn't working at the moment; figure out why and fix\n        return color.hsv(hue, sat, val);\n    }\n\n    /**\n     * Clear the last fade effect\n     */\n    //% blockId=colorClearFadeEffects block=\"clear fade effect\"\n    //% weight=20\n    export function clearFadeEffect() {\n        const effectStack = getFadingEffectStack();\n        if (effectStack.length) {\n            effectStack[effectStack.length - 1].fade.stop();\n            effectStack[0].applyRevert(0);\n            clearFadingEffectStack();\n        }\n    }\n\n    export function resetColorsToDefault() {\n        setPalette(originalPalette);\n    }\n\n    /**\n     * Returns the number of colors available in the palette\n     */\n    export function availableColors(): number {\n        return originalPalette.length;\n    }\n\n    /**\n     * Converts an array of RGB colors into a palette buffer\n     */\n    export function rgbArrayToPalette(colors: RGB[]): Palette {\n        return hexArrayToPalette(colors && colors.map(rgbToNumber));\n    }\n\n    /**\n     * Converts an array of HSL colors into a palette buffer\n     */\n    export function hslArrayToPalette(colors: HSL[]): Palette {\n        return hexArrayToPalette(colors && colors.map(hsl => hsl.hexValue()));\n    }\n\n    export function bufferToPalette(buf: Buffer): Palette {\n        const p = new Palette(buf.length / 3);\n        p.buf = buf;\n        return p;\n    }\n\n    /**\n     * Converts an array of hex colors into a palette buffer\n     */\n    export function hexArrayToPalette(colors: Color[]): Palette {\n        const numColors = Math.min(colors.length, availableColors());\n        const p = new Palette(numColors);\n\n        if (colors && colors.length) {\n            for (let i = 0; i < numColors; i++) {\n                p.setColor(i, colors[i]);\n            }\n        }\n\n        return p;\n    }\n\n    /**\n     * Returns the color that is the given percentage between start and end\n     *\n     * @param start the initial color (returned if percent is <= 0)\n     * @param end the final color (returned if percent is >= 1)\n     * @param the percentage between 0 and 1\n     */\n    export function partialColorTransition(start: Color, end: Color, percentage: number) {\n        if (percentage <= 0) {\n            return start;\n        } else if (percentage >= 1) {\n            return end;\n        }\n\n        const r1 = color.unpackR(start);\n        const g1 = color.unpackG(start);\n        const b1 = color.unpackB(start);\n\n        const rDiff = color.unpackR(end) - r1;\n        const gDiff = color.unpackG(end) - g1;\n        const bDiff = color.unpackB(end) - b1;\n\n        return toColor(\n            r1 + Math.round(rDiff * percentage),\n            g1 + Math.round(gDiff * percentage),\n            b1 + Math.round(bDiff * percentage)\n        );\n    }\n\n    /**\n     * Converts an RGB to a hex number\n     */\n    export function rgbToNumber(rgb: RGB): Color {\n        return toColor(rgb.red, rgb.green, rgb.blue);\n    }\n\n    export function currentPalette() {\n        if (currentColors) {\n            const p = new Palette(availableColors());\n            p.buf = currentColors.slice()\n            return p;\n        } else {\n            return _clone(originalPalette);\n        }\n    }\n\n    // combine the r, g, and b components into a single number\n    function toColor(r: number, g: number, b: number): Color {\n        return ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);\n    }\n\n    export function _clone(p: Palette) {\n        const out = new Palette(p.length);\n        for (let i = 0; i < p.length; ++i) {\n            out.setColor(i, p.color(i))\n        }\n        return out;\n    }\n}","fade.ts":"namespace color {\n    export class Fade {\n        protected startTime: number;\n        protected duration: number;\n        protected _startPalette: Palette;\n        protected _endPalette: Palette;\n\n        constructor() { }\n\n        public startPalette(): Palette {\n            if (!this._startPalette) {\n                this._startPalette = currentPalette();\n            }\n            return this._startPalette;\n        }\n\n        public endPalette(): Palette {\n            if (!this._endPalette) {\n                this._endPalette = currentPalette();\n            }\n            return this._endPalette;\n        }\n\n        public isActive(): boolean {\n            return this.startTime !== undefined\n                && this.duration !== undefined\n                && this.startTime + this.duration > game.runtime();\n        }\n\n        public start(duration = 1000): Fade {\n            init();\n            this.duration = duration;\n\n            color.setPalette(this.startPalette());\n            this.startTime = game.runtime();\n            activeFade = this;\n            return this;\n        }\n\n        public startUntilDone(duration?: number): Fade {\n            this.start(duration);\n            return this.pauseUntilDone();\n        }\n\n        public stop(): Fade {\n            this.startTime = undefined;\n            return this;\n        }\n\n        public setStartPalette(colors: Palette): Fade {\n            this._startPalette = _clone(colors);\n            return this;\n        }\n\n        public setStartColor(index: number, col: Color): Fade {\n            this.startPalette().setColor(index, col);\n            return this;\n        }\n\n        public setEndPalette(colors: Palette): Fade {\n            this._endPalette = _clone(colors);\n            return this;\n        }\n\n        public setEndColor(index: number, col: Color): Fade {\n            this.endPalette().setColor(index, col);\n            return this;\n        }\n\n        public step(): boolean {\n            if (!this._endPalette || this.startTime === undefined) {\n                return true;\n            }\n\n            if (!this.isActive()) {\n                color.setPalette(this._endPalette);\n                this.startTime = undefined;\n                return true;\n            }\n\n            const time = game.runtime() - this.startTime;\n\n            const p = new Palette(this._startPalette.length);\n\n            for (let i = 0; i < p.length; ++i) {\n                const col = color.partialColorTransition(\n                    this._startPalette.color(i),\n                    this._endPalette.color(i),\n                    time / this.duration\n                );\n                p.setColor(i, col);\n            }\n\n            color.setPalette(p);\n            return false;\n        }\n\n        public then(h: (fade: Fade) => void): Fade {\n            h(this);\n            return this;\n        }\n\n        public pauseUntilDone(): Fade {\n            pauseUntil(() => !this.isActive());\n            return this;\n        }\n\n        public reverse(): Fade {\n            const t = this._startPalette;\n\n            this._startPalette = this._endPalette;\n            this._endPalette = t;\n\n            return this;\n        }\n\n        public clone(): Fade {\n            const fade = new Fade();\n            if (this._startPalette)\n                fade._startPalette = _clone(this._startPalette);\n            if (this._endPalette)\n                fade._endPalette = _clone(this._endPalette);\n            return fade;\n        }\n\n        public mapEndRGB(\n            h: (rgb: RGB, index: number, palette: Palette) => RGB,\n            firstIndex?: number,\n            lastIndex?: number\n        ): Fade {\n            const out = this.clone();\n            const p = _clone(this.endPalette());\n\n            firstIndex = firstIndex | 0;\n            lastIndex = lastIndex === undefined\n                ? p.length - 1\n                : Math.min(p.length - 1, lastIndex);\n\n            for (let i = firstIndex; i <= lastIndex; ++i) {\n                const initRGB = RGB.fromHexValue(p.color(i));\n                const applied = h(initRGB, i, p);\n                p.setColor(i, applied.hexValue());\n            }\n\n            return out\n                .setEndPalette(p);\n        }\n\n        public mapEndHSL(\n            h: (hsl: HSL, index: number, palette: Palette) => HSL,\n            firstIndex?: number,\n            lastIndex?: number\n        ): Fade {\n            const out = this.clone();\n            const p = _clone(this.endPalette());\n\n            firstIndex = firstIndex | 0;\n            lastIndex = lastIndex === undefined\n                ? p.length - 1\n                : Math.min(p.length - 1, lastIndex);\n\n            for (let i = firstIndex; i <= lastIndex; ++i) {\n                const initHSL = HSL.fromHexValue(p.color(i));\n                const applied = h(initHSL, i, p);\n                p.setColor(i, applied.hexValue());\n            }\n\n            return out\n                .setEndPalette(p);\n        }\n    }\n\n    class FadeState {\n        constructor(\n            public state: Fade,\n            public scene: scene.Scene\n        ) { }\n    }\n\n    let activeFade: Fade;\n    let currentScene: scene.Scene;\n\n    let FadeStack: FadeState[];\n\n    game.addScenePushHandler(() => {\n        if (currentScene) {\n            if (!FadeStack) FadeStack = [];\n\n            FadeStack.push(\n                new FadeState(\n                    activeFade,\n                    currentScene\n                )\n            );\n\n            activeFade = undefined;\n            currentScene = undefined;\n        }\n    });\n\n    game.addScenePopHandler(() => {\n        const scene = game.currentScene();\n        currentScene = undefined;\n        activeFade = undefined;\n\n        if (FadeStack && FadeStack.length) {\n            const nextState = FadeStack.pop();\n            if (nextState.scene === scene) {\n                activeFade = nextState.state;\n                currentScene = nextState.scene;\n            } else {\n                FadeStack.push(nextState);\n            }\n        }\n    });\n\n\n    function init() {\n        if (!currentScene) {\n            game.forever(() => {\n                if (activeFade) {\n                    const finished = activeFade.step();\n\n                    if (finished) {\n                        activeFade = undefined;\n                    }\n                }\n            });\n            currentScene = game.currentScene();\n        }\n    }\n\n    /**\n     *  Create a Fade from start to end that occurs over the given duration\n     */\n    //% blockId=colorStartFade block=\"fade from %start to %end||over %duration ms\"\n    //% weight=80\n    //% duration.shadow=timePicker\n    export function startFade(start: Palette, end: Palette, duration = 2000) {\n        if (!start || !end || start.length !== end.length)\n            return;\n\n        color.clearFadeEffect();\n\n        activeFade = new Fade();\n        activeFade.setStartPalette(start);\n        activeFade.setEndPalette(end);\n        activeFade.start(duration)\n    }\n\n    /**\n     *  Create a Fade from the current palette to end that occurs over the given duration\n     */\n    //% blockId=colorStartFadeFromCurrent block=\"fade to %end||over %duration ms\"\n    //% weight=79\n    //% duration.shadow=timePicker\n    export function startFadeFromCurrent(end: Palette, duration = 2000) {\n        startFade(currentPalette(), end, duration);\n    }\n\n    export function startFadeUntilDone(start: Palette, end: Palette, duration?: number) {\n        startFade(start, end, duration);\n        pauseUntilFadeDone();\n    }\n\n    /**\n     * Pause until the current fade is completed\n     */\n    //% blockId=colorPauseUntilFadeDone block=\"pause until current fade done\"\n    //% weight=50\n    export function pauseUntilFadeDone() {\n        if (activeFade) {\n            activeFade.pauseUntilDone();\n        }\n    }\n}","palettes.ts":"namespace color {\n    /**\n     * The original palette buffer for the project\n     * \n     * This **must** be defined first in this file because others palettes\n     * may be defined relative to this palette\n     */\n    //% fixedInstance whenUsed block=\"original\"\n    export const originalPalette = bufferToPalette(hex`__palette`);\n\n    //% fixedInstance whenUsed block=\"adafruit\"\n    export const Adafruit = bufferToPalette(hex`\n        000000\n        17ABFF\n        DF2929\n        C600FF\n        FF007D\n        00FF72\n        e5FF00\n        0034FF\n        FFFFFF\n        00EFFF\n        FF0000\n        7400DB\n        636363\n        FF7a00\n        2D9F00\n        000000\n    `);\n\n    //% fixedInstance whenUsed block=\"matte\"\n    export const Matte = bufferToPalette(hex`\n        000000\n        1D2B53\n        7E2553\n        008751\n        AB5236\n        5F574F\n        C2C3C7\n        FFF1E8\n        FF004D\n        FFA300\n        FFEC27\n        00E436\n        29ADFF\n        83769C\n        FF77A8\n        FFCCAA\n    `);\n\n    //% fixedInstance whenUsed block=\"gray scale\"\n    export const GrayScale = bufferToPalette(hex`\n        000000\n        FFFFFF\n        EDEDED\n        DBDBDB\n        C8C8C8\n        B6B6B6\n        A4A4A4\n        929292\n        808080\n        6D6D6D\n        5B5B5B\n        494949\n        373737\n        242424\n        121212\n        000000\n    `);\n\n    // https://lospec.com/palette-list/poke14\n    //% fixedInstance whenUsed block=\"poke\"\n    export const Poke = bufferToPalette(hex`\n        000000\n        ffffff\n        e8958b\n        d45362\n        612431\n        f5dc8c\n        cc8945\n        8f3f29\n        c0fac2\n        5dd48f\n        417d53\n        6cadeb\n        5162c2\n        24325e\n        1b1221\n        000000\n    `);\n\n    // https://lospec.com/palette-list/warioware-diy\n    //% fixedInstance whenUsed block=\"DIY\"\n    export const DIY = bufferToPalette(hex`\n        000000\n        ffffff\n        f8d898\n        f8a830\n        c04800\n        f80000\n        c868e8\n        10c0c8\n        2868c0\n        089050\n        70d038\n        f8f858\n        787878\n        c0c0c0\n        f8f8f8\n        000000\n    `);\n\n    // https://lospec.com/palette-list/still-life\n    //% fixedInstance whenUsed block=\"still life\"\n    export const StillLife = bufferToPalette(hex`\n        000000\n        3f2811\n        7a2222\n        d13b27\n        e07f8a\n        5d853a\n        68c127\n        b3e868\n        122615\n        513155\n        286fb8\n        9b8bff\n        a8e4d4\n        cc8218\n        c7b581\n        000000\n    `);\n\n    // https://lospec.com/palette-list/steam-lords, missing 0xa0b9ba\n    //% fixedInstance whenUsed block=\"steam punk\"\n    export const SteamPunk = bufferToPalette(hex`\n        000000\n        213b25\n        3a604a\n        4f7754\n        a19f7c\n        77744f\n        775c4f\n        603b3a\n        3b2137\n        170e19\n        2f213b\n        433a60\n        4f5277\n        65738c\n        7c94a1\n        c0d1cc\n    `)\n\n    // https://lospec.com/palette-list/sweetie-16, missing 0x73eff7\n    //% fixedInstance whenUsed block=\"sweet\"\n    export const Sweet = bufferToPalette(hex`\n        000000\n        1a1c2c\n        5d275d\n        b13e53\n        ef7d57\n        ffcd75\n        a7f070\n        38b764\n        257179\n        29366f\n        3b5dc9\n        41a6f6\n        f4f4f4\n        94b0c2\n        566c86\n        333c57\n    `);\n\n    // https://lospec.com/palette-list/na16, missing 0x70377f\n    //% fixedInstance whenUsed block=\"adventure\"\n    export const Adventure = bufferToPalette(hex`\n        000000\n        8c8fae\n        584563\n        3e2137\n        9a6348\n        d79b7d\n        f5edba\n        c0c741\n        647d34\n        e4943a\n        9d303b\n        d26471\n        7ec4c1\n        34859d\n        17434b\n        1f0e1c\n    `);\n\n    //% fixedInstance whenUsed block=\"arcade\"\n    export const Arcade = bufferToPalette(hex`\n        000000\n        FFFFFF\n        FF2121\n        FF93C4\n        FF8135\n        FFF609\n        249CA3\n        78DC52\n        003FAD\n        87F2FF\n        8E2EC4\n        A4839F\n        5C406c\n        E5CDC4\n        91463d\n        000000\n    `);\n\n    //% fixedInstance whenUsed block=\"black\"\n    export const Black = bufferToPalette(hex`\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n        000000\n    `);\n\n    //% fixedInstance whenUsed block=\"white\"\n    export const White = bufferToPalette(hex`\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n        FFFFFF\n    `);\n} ","effect.ts":"namespace color {\n    const stateNamespace = \"__coloreffectstate\";\n\n    //% fixedInstance whenUsed block=\"fade to black\"\n    export const FadeToBlack = new FadeEffect(\"fadetoblack\", () => {\n        return (new Fade())\n            .setEndPalette(Black);\n    });\n\n    //% fixedInstance whenUsed block=\"fade to white\"\n    export const FadeToWhite = new FadeEffect(\"fadetowhite\", () => {\n        return (new Fade())\n            .setEndPalette(White);\n    });\n\n    //% fixedInstance whenUsed block=\"darken\"\n    export const Darken = new FadeEffect(\"darken\", darkenEffect, \"brighten\");\n    function darkenEffect() {\n        const f = new Fade();\n        return f.mapEndHSL(hsl => {\n            hsl.luminosity *= .75;\n            hsl.saturation *= .9;\n            return hsl;\n        });\n    }\n\n    //% fixedInstance whenUsed block=\"brighten\"\n    export const Brighten = new FadeEffect(\"brighten\", brightenEffect, \"darken\");\n    function brightenEffect() {\n        const f = new Fade();\n        return f.mapEndHSL(hsl => {\n            hsl.luminosity /= .75;\n            hsl.saturation /= .9;\n            return hsl;\n        });\n    }\n\n    //% fixedInstance whenUsed block=\"rotate palette\"\n    export const RotatePalette = new FadeEffect(\"rotate\", () => {\n        const l = availableColors();\n        const p = color._clone(currentPalette())\n\n        const lastColor = p.color(l - 1);\n        for (let i = l - 1; i > 1; --i) {\n            p.setColor(i, p.color(i - 1));\n        }\n        p.setColor(1, lastColor);\n\n        return (new Fade())\n            .setEndPalette(p);\n    });\n}","test.ts":"scene.setBackgroundImage(img`\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 5 5 5 5 5 6 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 5 5 5 5 5 6 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 5 5 5 5 5 6 6 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 5 5 5 5 5 6 6 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 5 5 5 5 5 5 6 6 6 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 5 5 5 5 5 5 5 6 6 6 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 5 5 5 5 5 5 5 6 6 6 6 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 5 5 5 5 5 5 5 6 6 6 6 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c c 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 5 5 5 5 5 5 5 5 6 6 6 6 6 6 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c c 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 c c c c c 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c c c 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 c c c c c c 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 5 5 5 5 5 5 5 9 6 6 6 6 6 6 6 a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 c c c c c c c 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 c c c c c c c 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 5 5 5 5 5 5 5 5 9 6 6 6 6 6 6 6 6 a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 c c c c c c c 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 c c c c c c c c 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 5 5 5 5 5 5 5 5 9 9 9 6 6 6 6 6 6 6 a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 c c c c c c c c 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 c c c c c c c c 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 5 5 5 5 5 5 5 5 9 9 9 9 9 6 6 6 6 6 6 6 a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 c c c c c c c c c 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 c c c c c c c c c 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 5 5 5 5 5 5 5 5 9 9 9 9 9 6 6 6 6 6 6 6 a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 c c c c c c c c c 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 c c c c c c c c c c 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 5 5 5 5 5 5 5 9 9 9 9 9 9 9 6 6 6 6 6 6 6 a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 c c c c c c c c c c 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 c c c c c c c c c c 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 5 5 5 5 5 5 5 8 9 9 9 9 9 9 9 6 6 6 6 6 6 6 a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 c c c c c c c c c c c 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 c c c c c c c c c c c 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 5 5 5 5 5 5 5 8 8 9 9 9 9 9 9 9 9 6 6 6 6 6 6 6 a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 c c c c c c c c c c c 3 3 3 3 3 3 4 4 4 4 4 4 c c c c c c c c c c c c c c 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 5 5 5 5 5 5 5 5 8 8 9 9 9 9 9 9 9 9 6 6 6 6 6 6 6 a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 c c c c c c c c c c c c 3 3 3 3 4 4 4 c c c c c c c c c c c c c c c c 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 5 5 5 5 5 5 5 5 8 8 9 9 9 9 9 9 9 9 9 6 6 6 6 6 6 6 a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 5 5 5 5 5 5 5 5 8 8 8 9 9 9 9 9 9 9 9 9 6 6 6 6 6 6 6 a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 c c c c c c c c c c c c c c c c c c c c c c c c c c c c 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 5 5 5 5 5 5 5 8 8 8 8 9 9 9 9 9 9 9 9 9 9 6 6 6 6 6 6 a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 c c c c c c c c c c c c c c c c c c c c c c c c c 5 5 5 9 9 9 9 9 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 5 5 5 5 5 5 5 5 8 8 8 8 9 9 9 9 9 9 9 9 9 9 6 6 6 6 6 6 a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 c c c c c c c c c c c c c c c c c c c c 5 5 5 5 5 5 5 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 5 5 5 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a 6 6 6 1 1 1 1 1 a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 c c c c c c c c c c c c c c c 4 4 4 5 5 5 5 5 5 5 9 9 a a a a a a a 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 5 5 5 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a 6 6 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 9 9 a a a a a a a a a 9 9 9 9 9 9 9 9 9 9 9 9 9 9 5 5 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a 6 6 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 9 9 a a a a a a a a a a a 9 9 9 9 9 9 9 9 9 9 9 9 5 5 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a 6 6 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 9 9 a a a a a a a a a a a a a 9 9 9 9 9 9 9 9 9 9 5 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 a a a a a a a a a a a a a a a 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 a a a a a a a a a a a a a a 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 a a a a a a a a a a a a a 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b 4 4 4 4 4 4 4 4 4 4 4 4 4 4 c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 a a a a a a a a a a a a a 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b 4 4 4 4 4 4 4 4 4 4 4 4 4 4 c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 a a a a a a a a a a a a 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a 4 4 4 4 4 4 4 4 4 4 4 4 4 4 c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 a a a a a a a a a a a 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a 4 4 4 4 4 4 4 4 4 4 4 4 4 4 c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 a a a a a a a a a a 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a 4 4 4 4 4 4 4 4 4 4 4 4 4 b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 a a a a a a a a a a 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a 4 4 4 4 4 4 4 4 4 4 4 4 4 b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 a a a a a a a a a a 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a 4 4 4 4 4 4 4 4 4 4 4 4 b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 a a a a a a a a a 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a 4 4 4 4 4 4 4 4 4 4 4 b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 a a a a c c c c c 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 f f 4 4 4 4 4 4 4 4 4 b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 a a a c c c c c 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 f f 4 4 4 4 4 4 4 4 b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 a c c c c c 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 f f 4 4 4 4 4 4 a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 c c c c c c 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 f f 4 4 4 4 4 f f a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 c c c c c c 8 8 8 8 8 9 9 d e e e e e 9 9 f f f f f f f f f f b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 c c c c c c c 8 8 8 8 8 9 d d e e e e e e 9 a a f f f f f f f f f b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 c c c c c c c 8 8 8 8 d d d d e e e e e e e a a a f f f f f f f f f b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 c c c c c c c 8 8 8 d d d d d d e e e e e e e e a a f f f f f f f f f f b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 c c c c c c c 8 d d d d d d d d e e e e e e e e e a a f f f f f f f f f b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 c c c c c c c 8 d d d d d d d d d d e e e e e e e e e a a a f f f f f f f f b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 c c c c c c c d d d d d d d d d d d d e e e e e e e e e a a a f f f f f f f f b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 c c c c c c c d d d d d d d d d d d 9 9 9 e e e e e e e e e a a a f f f f f f f f b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 c c c c c c c d d d d d d d d d d 9 9 9 9 9 9 e e e e e e e e e e a f f f f f f f f b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 c c c c c c c d d d d d d d d d 8 9 9 9 9 9 9 9 9 e e e e e e e e e e a f f f f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 c c c c c c c d d d d d d d d d 8 8 9 9 9 9 9 9 9 9 9 e e e e e e e e e e a f f f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 c c c c c c d d d d d d d d d 8 8 8 9 9 9 9 9 9 9 9 9 9 e e e e e e e e e e b f f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 c c c c c c d d d d d d d d d 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a e e e e e e e e e e f f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 c c c c c c d d d d d d d d d 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a e e e e e e e e e f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 c c c c c d d d d d d d d d 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a e e e e e e e e f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 c c c c c d d d d d d d d d 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a e e e e e e e f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 c c c c c d d d d d d d d d 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a e e e e e e f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 c c c c d d d d d d d d d 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a e e e e f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 c c c c d d d d d d d d d 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a e e e f f f f f b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 c c c d d d d d d d d d 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a e e e e e e b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 c c d d d d d d d d d 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b e e e e e b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 c c d d d d d d d d 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 c c d d d d d d d 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 c c d d d d d d 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 d d d d d 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f . . . . . . . . . .\n`);\n\n// conversions:\n// game.splash(color.HSL.fromHexValue(0x00bfff) + \"\") // should be ~~hsl(195, 1.0, 0.5)\n// game.splash(color.HSL.fromHexValue(0xffbfff) + \"\") // should be ~~hsl(300, 1.0, .87)\n// game.splash((new color.HSL(300, 1.0, .87).hexValue()) + \" \") // should be ~~ 0xFFBDFF (16706319)\n\n// scene.setBackgroundColor(0xF);\n\n// color.setPalette(color.Arcade)\nforever (() => {\n    color.setPalette(color.Adafruit);\n    color.Darken.startScreenEffect(1000);\n    color.pauseUntilFadeDone();\n    color.Brighten.startScreenEffect(1000);\n    color.pauseUntilFadeDone();\n    color.FadeToBlack.startScreenEffect(2000);\n    color.RotatePalette.startScreenEffect(2000)\n    new color.Fade()\n        .setEndPalette(color.Black)\n        .start(2000);\n    pause(3000)\n    color.startFadeUntilDone(color.Arcade, color.Adafruit, 2000);\n    color.startFadeUntilDone(color.Adafruit, color.Matte, 2000);\n\n    const grayArcade = color._clone(color.Arcade);\n    grayArcade.setColor(0xF, 0x737373);\n    color.startFadeUntilDone(grayArcade, color.Arcade, 1000)\n\n    // fade to black\n    color.startFadeUntilDone(color.Arcade, color.Black, 2000);\n    color.startFadeUntilDone(color.currentPalette(), color.GrayScale, 2000);\n\n    new color.Fade()\n        .setEndColor(0x1, 0xFF0000)\n        .setEndColor(0x2, 0x00FF00)\n        .setEndColor(0x3, 0x0000FF)\n        .setEndColor(0x4, 0xFF00FF)\n        .setEndColor(0x5, 0xFFFF00)\n        .setEndColor(0x6, 0x00FFFF)\n        .setEndColor(0xA, 0xAAAAAA)\n        .setEndColor(0xB, 0x05A2B7)\n        .setEndColor(0xC, 0x678987)\n        .setEndColor(0xD, 0x123456)\n        .setEndColor(0xF, 0xFFFFFF)\n        .start(2000)\n        .pauseUntilDone()\n        .reverse()\n        .startUntilDone(2000)\n        .reverse()\n        .mapEndRGB(rgb => {\n            rgb.red -= 0x7F;\n            rgb.green -= 0x7F;\n            rgb.blue -= 0x7F;\n            return rgb;\n        })\n        .startUntilDone(1000);\n    color.startFadeUntilDone(color.currentPalette(), color.White, 2000);\n});"}}