{"files":{"pxt.json":"{\n    \"name\": \"settings-blocks\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"description\": \"Blocks for saving game settings\",\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"version\": \"1.0.0\"\n}\n","main.ts":"//% block=\"settings\" color=#3b3b3b icon=\"\\uf0c7\"\n//% groups='[\"Numbers\", \"Strings\", \"Arrays\", \"Operations\"]'\nnamespace blockSettings {\n    /**\n     * Set named settings to a given number.\n     * \n     * @param name   The name of the setting to set\n     */\n    //% blockId=block_settings_write_number\n    //% block=\"set setting $name to number $value\"\n    //% weight=100 blockGap=8 group=\"Numbers\"\n    export function writeNumber(name: string, value: number) {\n        settings.writeNumber(name, value);\n    }\n\n    /**\n     * Read named setting as a number.\n     * \n     * @param name   The name of the setting to read\n     */\n    //% blockId=block_settings_read_number\n    //% block=\"read setting $name as number\"\n    //% weight=90 group=\"Numbers\"\n    export function readNumber(name: string) {\n        return settings.readNumber(name);\n    }\n\n    /**\n     * Set named settings to a given string.\n     * \n     * @param name   The name of the setting to set\n     */\n    //% blockId=block_settings_write_string\n    //% block=\"set setting $name to string $value\"\n    //% weight=80 blockGap=8 group=\"Strings\"\n    export function writeString(name: string, value: string) {\n        settings.writeString(name, value);\n    }\n\n    /**\n     * Read named setting as a string.\n     * \n     * @param name   The name of the setting to read\n     */\n    //% blockId=block_settings_read_string\n    //% block=\"read setting $name as string\"\n    //% weight=70 group=\"Strings\"\n    export function readString(name: string) {\n        return settings.readString(name);\n    }\n\n    /**\n     * Set named settings to a given array of numbers.\n     * \n     * @param name   The name of the setting to set\n     */\n    //% blockId=block_settings_write_number_array\n    //% block=\"set setting $name to number array $value\"\n    //% weight=60 blockGap=8 group=\"Arrays\"\n    export function writeNumberArray(name: string, value: number[]) {\n        settings.writeNumberArray(name, value);\n    }\n\n    /**\n     * Read named setting as an array of numbers.\n     * \n     * @param name   The name of the setting to read\n     */\n    //% blockId=block_settings_read_number_array\n    //% block=\"read setting $name as number array\"\n    //% weight=50 group=\"Arrays\"\n    export function readNumberArray(name: string) {\n        return settings.readNumberArray(name);\n    }\n\n    /**\n     * Remove a named setting.\n     * \n     * @param name   The name of the setting to remove\n     */\n    //% blockId=block_settings_remove\n    //% block=\"remove setting with name $name\"\n    //% weight=40 blockGap=8 group=\"Operations\"\n    export function remove(name: string) {\n        return settings.remove(name);\n    }\n\n    /**\n     * Check if a named setting exists.\n     * \n     * @param name   The name to check\n     */\n    //% blockId=block_settings_exists\n    //% block=\"setting with name $name exists\"\n    //% weight=30 blockGap=8 group=\"Operations\"\n    export function exists(name: string) {\n        return settings.exists(name);\n    }\n\n    /**\n     * Return a list of names for all used settings.\n     */\n    //% blockId=block_settings_lists\n    //% block=\"array of all settings names\"\n    //% weight=20 blockGap=8 group=\"Operations\"\n    export function list() {\n        return settings.list();\n    }\n\n    /** \n    * Delete all non-system settings.\n    */\n    //% blockId=block_settings_clear\n    //% block=\"clear all settings\"\n    //% weight=10 blockGap=8 group=\"Operations\"\n    export function clear(): void {\n        settings.clear();\n    }\n}","README.md":"# pxt-settings-blocks\r\n\r\nThis repository contains the blocks for the settings extension in Microsoft MakeCode Arcade. The actual implementation of the settings can be found in [pxt-common-packages](https://github.com/microsoft/pxt-common-packages/tree/master/libs/settings).\r\n\r\n\r\n## Supported targets\r\n\r\n* for PXT/arcade\r\n* for PXT/arcade\r\n(The metadata above is needed for package search.)\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}